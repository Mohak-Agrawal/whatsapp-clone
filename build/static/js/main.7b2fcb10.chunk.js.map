{"version":3,"sources":["SidebarChat/SidebarChat.js","Sidebar/Sidebar.js","Chat/Chat.js","App.js","serviceWorker.js","index.js"],"names":["SidebarChat","className","Avatar","Sidebar","src","IconButton","DonutLarge","MoreVert","SearchOutlined","placeholder","type","Chat","AttachFile","Date","toUTCString","InsertEmoticon","onChange","e","SettingsInputAntenna","target","value","Button","Mic","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4WAeeA,G,MAXK,WAChB,OACI,yBAAKC,UAAU,eACX,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,oBACX,0CACA,2DC6BDE,EAjCC,WACZ,OACI,yBAAKF,UAAU,WACX,yBAAKA,UAAU,kBACX,kBAACC,EAAA,EAAD,CAAQE,IAAI,mHACZ,yBAAKH,UAAU,uBACX,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,OAEJ,kBAACD,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,SAIZ,yBAAKN,UAAU,kBACX,yBAAKA,UAAU,2BACX,kBAACO,EAAA,EAAD,MACA,2BAAOC,YAAY,2BACnBC,KAAK,WAIb,yBAAKT,UAAU,iBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,wCCwCDU,G,MArEF,WACT,OACI,yBAAKV,UAAU,QACX,yBAAKA,UAAU,eACX,kBAACC,EAAA,EAAD,MAEA,yBAAKD,UAAU,mBACX,yCACA,+CAGJ,yBAAKA,UAAU,oBACX,kBAACI,EAAA,EAAD,KACI,kBAACG,EAAA,EAAD,OAEJ,kBAACH,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,OAEJ,kBAACP,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,SAKZ,yBAAKN,UAAU,aACX,uBAAGA,UAAU,gBACT,0BAAMA,UAAU,aAAhB,SADJ,oBAGI,0BAAMA,UAAU,mBACX,IAAIY,MAAOC,gBAGpB,uBAAGb,UAAU,8BACT,0BAAMA,UAAU,aAAhB,SADJ,oBAGI,0BAAMA,UAAU,mBACX,IAAIY,MAAOC,gBAGpB,uBAAGb,UAAU,gBACT,0BAAMA,UAAU,aAAhB,SADJ,oBAGI,0BAAMA,UAAU,mBACX,IAAIY,MAAOC,iBAIxB,yBAAKb,UAAU,eACX,kBAACI,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,OAEJ,8BACI,2BACIC,SAAU,SAACC,GAAD,OAAOC,YAAqBD,EAAEE,OAAOC,QAC/CX,YAAY,iBACZC,KAAK,SAEL,kBAACW,EAAA,EAAD,CACIX,KAAK,UADT,mBAKR,kBAACL,EAAA,EAAD,KACI,kBAACiB,EAAA,EAAD,WCpDLC,MAXf,WACE,OACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,YACZ,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEWuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7b2fcb10.chunk.js","sourcesContent":["import React from 'react'\nimport { Avatar} from '@material-ui/core';\nimport './SidebarChat.css'\n\nconst SidebarChat = () => {\n    return (\n        <div className=\"sidebarChat\">\n            <Avatar/>\n            <div className=\"sidebarChat_info\">\n                <h2> Room name</h2>\n                <p>This is the last message</p>\n            </div>\n        </div>\n    )\n}\nexport default SidebarChat\n","import React from 'react'\nimport \"./Sidebar.css\"\nimport {Chat,SearchOutlined,MoreVert,DonutLarge} from '@material-ui/icons';\nimport { IconButton , Avatar} from '@material-ui/core';\nimport SidebarChat from '../SidebarChat/SidebarChat';\n\nconst Sidebar = () => {\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar_header\">\n                <Avatar src=\"https://images.vexels.com/media/users/3/145908/preview2/52eabf633ca6414e60a7677b0b917d92-male-avatar-maker.jpg\"/>\n                <div className=\"sidebar_headerRight\">\n                    <IconButton>\n                        <DonutLarge />\n                    </IconButton>\n                    <IconButton>\n                        <Chat />\n                    </IconButton>\n                    <IconButton>\n                        <MoreVert />\n                    </IconButton>\n                </div>\n            </div>\n            <div className=\"sidebar_search\">\n                <div className=\"sidebar_searchContainer\">\n                    <SearchOutlined/>\n                    <input placeholder=\"Search or start new chat\" \n                    type=\"text\"/> \n                    \n                </div>\n            </div>\n            <div className=\"sidebar_chats\">\n                <SidebarChat/>\n                <SidebarChat/>\n                <SidebarChat/> \n            </div>\n        </div>\n    )\n}\nexport default Sidebar\n","import React from 'react'\nimport { Avatar, IconButton, Button} from '@material-ui/core';\nimport {AttachFile,MoreVert,SearchOutlined,InsertEmoticon, SettingsInputAntenna,Mic} from '@material-ui/icons';\nimport \"./Chat.css\" \n\nconst Chat = () => {\n    return (\n        <div className='chat'>\n            <div className=\"chat_header\">\n                <Avatar/>\n\n                <div className=\"chat_headerInfo\">\n                    <h3>Room name</h3>\n                    <p>Last seen at...</p>\n                </div>\n\n                <div className=\"chat_headerRight\">\n                    <IconButton>\n                        <SearchOutlined />\n                    </IconButton>\n                    <IconButton>\n                        <AttachFile />\n                    </IconButton>\n                    <IconButton>\n                        <MoreVert />\n                    </IconButton>\n                </div>\n            </div>\n\n            <div className=\"chat_body\">\n                <p className=\"chat_message\">\n                    <span className=\"chat_name\">Mohak</span>\n                    This is a message\n                    <span className=\"chat_timestamp\">\n                        {new Date().toUTCString()}\n                    </span>\n                </p>\n                <p className=\"chat_message chat_reciever\">\n                    <span className=\"chat_name\">Mohak</span>\n                    This is a message\n                    <span className=\"chat_timestamp\">\n                        {new Date().toUTCString()}\n                    </span>\n                </p>\n                <p className=\"chat_message\">\n                    <span className=\"chat_name\">Mohak</span>\n                    This is a message\n                    <span className=\"chat_timestamp\">\n                        {new Date().toUTCString()}\n                    </span>\n                </p>\n            </div>\n            <div className=\"chat_footer\">\n                <IconButton>\n                    <InsertEmoticon/>\n                </IconButton>\n                <form>\n                    <input \n                        onChange={(e) => SettingsInputAntenna(e.target.value)}\n                        placeholder=\"Type a message\"\n                        type=\"text\"\n                    />\n                        <Button \n                            type=\"submit\">\n                            Send a message\n                        </Button>\n                </form>\n                <IconButton>\n                    <Mic/>\n                </IconButton>\n            </div>\n        </div>\n    )\n}\nexport default Chat\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar/Sidebar'\nimport  Chat  from './Chat/Chat';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"app_body\">\n         <Sidebar/>\n         <Chat/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}